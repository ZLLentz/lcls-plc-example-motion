<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Main" Id="{7b41e58a-08f0-4959-90b4-af08ef5cbf10}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Main
VAR
    // See how pytmc update reacts to pragma on AMDNETID
    {attribute 'pytmc' := '
        pv: @(PREFIX):NETID_TEST
    '}
    netID: AMSNETID;

    // Simulated motor that is always allowed to move
    {attribute 'pytmc' := '
        pv: @(PREFIX)01
        field: DESC Simulated Working Motor
    '}
    M1: ST_MotionStage := (sName := 'SIM:01');
    fbMotion1: FB_MotionStageSim;

    // Simulated motor that is never allowed to move
    {attribute 'pytmc' := '
        pv: @(PREFIX)02
        field: DESC Simulated Broken Motor
    '}
    M2: DUT_MotionStage := (sName := 'SIM:02');
    fbMotion2: FB_MotionStage;

    // Simulated motor with limits at 0 and 100
    {attribute 'pytmc' := '
        pv: @(PREFIX)03
        field: DESC Simulated Working Motor With Limits
    '}
    M3: ST_MotionStage := (sName := 'SIM:03');
    fbMotion3: FB_MotionStage;

    // Simulated motor xpim y
    {attribute 'pytmc' := '
        pv: IMTST:XTES:MMS
        field: DESC Simulated XPIM Y
    '}
    M4: ST_MotionStage := (sName := 'IMTST:XTES:MMS');
    // Simulated motor xpim zoom
    {attribute 'pytmc' := '
        pv: IMTST:XTES:CLZ
        field: DESC Simulated XPIM ZOOM
    '}
    M5: ST_MotionStage := (sName := 'IMTST:XTES:CLZ');
    // Simulated motor xpim focus
    {attribute 'pytmc' := '
        pv: IMTST:XTES:CLF
        field: DESC Simulated XPIM FOCUS
    '}
    M6: ST_MotionStage := (sName := 'IMTST:XTES:CLF');

    {attribute 'pytmc' := '
        pv: IMTST:XTES
        io: io
    '}
    fbIM1L0: FB_XPIM;
    stEL6In AT %I*: EL6InData22b;
    stEL6Out AT %Q*: EL6OutData22b;

    // Simulated motor dimension X for 3d test
    {attribute 'pytmc' := '
        pv: @(PREFIX)3D:X
        field: DESC Simulated X motor for 3d move
    '}
    M7: ST_MotionStage := (sName := '3D:X');
    fbMotion7: FB_MotionStage;
    // Simulated motor dimension Y for 3d test
    {attribute 'pytmc' := '
        pv: @(PREFIX)3D:Y
        field: DESC Simulated Y motor for 3d move
    '}
    M8: ST_MotionStage := (sName := '3D:Y');
    fbMotion8: FB_MotionStage;
    // Simulated motor dimension Z for 3d test
    {attribute 'pytmc' := '
        pv: @(PREFIX)3D:Z
        field: DESC Simulated Z motor for 3d move
    '}
    M9: ST_MotionStage := (sName := '3D:Z');
    fbMotion9: FB_MotionStage;
    {attribute 'pytmc' := '
        pv: @(PREFIX)3D
    '}
    fb3D: FB_PositionStatePMPS3D;
    astM7States: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    astM8States: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    astM9States: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    {attribute 'pytmc' := '
        pv: @(PREFIX)3D:STATE:SET
        io: io
    '}
    e3DSet: ENUM_TwoTargets;
    {attribute 'pytmc' := '
        pv: @(PREFIX)3D:STATE:GET
        io: i
    '}
    e3DGet: ENUM_TwoTargets;

    // Simulated motor for limit to limit test
    {attribute 'pytmc' := '
        pv: @(PREFIX)L2L:MOT
        field: DESC Simulated motor for limit to limit state move
    '}
    M10: ST_MotionStage := (sName := 'SIM:L2L');
    fbMotion10: FB_MotionStage;
    {attribute 'pytmc' := '
        pv: @(PREFIX)L2L
    '}
    fbM10States: FB_PositionState1D;
    astM10States: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    {attribute 'pytmc' := '
        pv: @(PREFIX)L2L:STATE:SET
        io: io
    '}
    eL2LSet: ENUM_EpicsInOut;
    {attribute 'pytmc' := '
        pv: @(PREFIX)L2L:STATE:GET
        io: io
    '}
    eL2LGet: ENUM_EpicsInOut;

    bInit: BOOL := TRUE;
    fbArbiterIO: FB_DummyArbIO;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbMotion1(stMotionStage := M1);
fbMotion2(stMotionStage := M2);
fbMotion3(stMotionStage := M3);
M3.bHardwareEnable := TRUE;
M3.bPowerSelf := TRUE;
M3.bLimitForwardEnable := M3.Axis.NcToPlc.ActPos < 99.7;
M3.bLimitBackwardEnable := M3.Axis.NcToPlc.ActPos > 0.2;

IF bInit THEN
    // Simulated IM1L0 Positions and Parameters
    fbIM1L0.stOut.fPosition := 0;
    fbIM1L0.stOut.bUseRawCounts := FALSE;
    fbIM1L0.stOut.stPMPS.sPmpsState := 'IM1K0:XTES-OUT';
    fbIM1L0.stOut.bValid := TRUE;
    fbIM1L0.stYag.fPosition := -86.65;
    fbIM1L0.stYag.bUseRawCounts := FALSE;
    fbIM1L0.stYag.stPMPS.sPmpsState := 'IM1K0:XTES-YAG';
    fbIM1L0.stYag.bValid := TRUE;
    fbIM1L0.stDiamond.fPosition := -56.65;
    fbIM1L0.stDiamond.bUseRawCounts := FALSE;
    fbIM1L0.stDiamond.stPMPS.sPmpsState := 'IM1K0:XTES-DIAMOND';
    fbIM1L0.stDiamond.bValid := TRUE;
    fbIM1L0.stReticle.fPosition := -26.65;
    fbIM1L0.stReticle.bUseRawCounts := FALSE;
    fbIM1L0.stReticle.stPMPS.sPmpsState := 'IM1K0:XTES-RETICLE';
    fbIM1L0.stReticle.bValid := TRUE;

    // 3D with 3 states, select one lookup for each index
    astM7States[1].stPMPS.sPmpsState := '3D-OUT';
    astM7States[2].stPMPS.sPmpsState := '3D-TARGET1';
    astM7States[3].stPMPS.sPmpsState := '3D-TARGET2';

    // Set up 3 states for M7 (part of 3d)
    astM7States[1].sName := 'OUT';
    astM7States[1].fPosition := 0;
    astM7States[1].fDelta := 0.1;
    astM7States[1].fVelocity := 5;
    astM7States[1].bValid := TRUE;
    astM7States[1].bMoveOk := TRUE;
    astM7States[2].sName := 'TARGET1';
    astM7States[2].fPosition := 15;
    astM7States[2].fDelta := 0.1;
    astM7States[2].fVelocity := 5;
    astM7States[2].bValid := TRUE;
    astM7States[2].bMoveOk := TRUE;
    astM7States[3].sName := 'TARGET2';
    astM7States[3].fPosition := 30;
    astM7States[3].fDelta := 0.1;
    astM7States[3].fVelocity := 5;
    astM7States[3].bValid := TRUE;
    astM7States[3].bMoveOk := TRUE;

    // Set up 3 states for M8 (part of 3d)
    astM8States[1].sName := 'OUT';
    astM8States[1].fPosition := 15;
    astM8States[1].fDelta := 0.1;
    astM8States[1].fVelocity := 5;
    astM8States[1].bValid := TRUE;
    astM8States[1].bMoveOk := TRUE;
    astM8States[2].sName := 'TARGET1';
    astM8States[2].fPosition := 0;
    astM8States[2].fDelta := 0.1;
    astM8States[2].fVelocity := 5;
    astM8States[2].bValid := TRUE;
    astM8States[2].bMoveOk := TRUE;
    astM8States[3].sName := 'TARGET2';
    astM8States[3].fPosition := -15;
    astM8States[3].fDelta := 0.1;
    astM8States[3].fVelocity := 5;
    astM8States[3].bValid := TRUE;
    astM8States[3].bMoveOk := TRUE;

    // Set up 3 states for M9 (part of 3d)
    astM9States[1].sName := 'OUT';
    astM9States[1].fPosition := -30;
    astM9States[1].fDelta := 0.1;
    astM9States[1].fVelocity := 5;
    astM9States[1].bValid := TRUE;
    astM9States[1].bMoveOk := TRUE;
    astM9States[2].sName := 'TARGET1';
    astM9States[2].fPosition := -15;
    astM9States[2].fDelta := 0.1;
    astM9States[2].fVelocity := 5;
    astM9States[2].bValid := TRUE;
    astM9States[2].bMoveOk := TRUE;
    astM9States[3].sName := 'TARGET2';
    astM9States[3].fPosition := 0;
    astM9States[3].fDelta := 0.1;
    astM9States[3].fVelocity := 5;
    astM9States[3].bValid := TRUE;
    astM9States[3].bMoveOk := TRUE;

    // Set 3D enables once so we can demo turning them off
    fb3D.bEnableMotion := TRUE;
    fb3D.bEnableBeamParams := TRUE;
    fb3D.bEnablePositionLimits := TRUE;

    // Set up fixed portion of L2L states
    astM10States[1].sName := 'OUT';
    astM10States[1].fPosition := 100;
    astM10States[1].fDelta := 0.1;
    astM10States[1].fVelocity := 10;
    astM10States[1].bValid := TRUE;
    astM10States[1].bMoveOk := TRUE;
    astM10States[2].sName := 'IN';
    astM10States[2].fPosition := 0;
    astM10States[2].fDelta := 0.1;
    astM10States[2].fVelocity := 5;
    astM10States[2].bValid := TRUE;
    astM10States[2].bMoveOk := TRUE;

    bInit := FALSE;
END_IF

// Run the fake IM1L0
M4.bHardwareEnable := TRUE;
M4.bPowerSelf := FALSE;
M4.bLimitForwardEnable := TRUE;
M4.bLimitBackwardEnable := TRUE;
M5.bHardwareEnable := TRUE;
M5.bPowerSelf := TRUE;
M5.bLimitForwardEnable := TRUE;
M5.bLimitBackwardEnable := TRUE;
M6.bHardwareEnable := TRUE;
M6.bPowerSelf := TRUE;
M6.bLimitForwardEnable := TRUE;
M6.bLimitBackwardEnable := TRUE;
fbIM1L0(
    fbArbiter := GVL.fbArbiter,
    fbFFHWO := GVL.fbFastFaultOutput1,
    stYStage := M4,
    stZoomStage := M5,
    stFocusStage := M6,
    stEl6In := stEL6In,
    stEl6Out := stEl6Out,
    sPmpsDeviceName := 'IM1K0:XTES',
    sTransitionKey:='IM1K0:XTES-TRANSITION',
);

// Run the 3D demo
M7.bHardwareEnable := TRUE;
M7.bPowerSelf := FALSE;
M7.bLimitForwardEnable := TRUE;
M7.bLimitBackwardEnable := TRUE;
M8.bHardwareEnable := TRUE;
M8.bPowerSelf := FALSE;
M8.bLimitForwardEnable := TRUE;
M8.bLimitBackwardEnable := TRUE;
M9.bHardwareEnable := TRUE;
M9.bPowerSelf := FALSE;
M9.bLimitForwardEnable := TRUE;
M9.bLimitBackwardEnable := TRUE;
fbMotion7(stMotionStage:=M7);
fbMotion8(stMotionStage:=M8);
fbMotion9(stMotionStage:=M9);
fb3D(
    stMotionStage1:=M7,
    stMotionStage2:=M8,
    stMotionStage3:=M9,
    astPositionState1:=astM7States,
    astPositionState2:=astM8States,
    astPositionState3:=astM9States,
    eEnumSet:=e3DSet,
    eEnumGet:=e3DGet,
    fbFFHWO:=GVL.fbFastFaultOutput1,
    fbArbiter:=GVL.fbArbiter,
    sDeviceName:='3D',
    sTransitionKey:='3D-TRANS',
);

// Run the limit to limit demo
M10.bHardwareEnable := TRUE;
M10.bPowerSelf := TRUE;
M10.bLimitForwardEnable := M10.Axis.NcToPlc.ActPos < 99.7;
M10.bLimitBackwardEnable := M10.Axis.NcToPlc.ActPos > 0.2;
fbMotion10(stMotionStage:=M10);
// Dynamically adjust the states for our unencoded l2l move
// Notes: forward goes out, out is index 1 pos 100mm, in is index 2 pos 0mm
IF NOT M10.Axis.Status.ControlLoopClosed THEN
    // Neither limit hit: assume both goals are 105 away
    IF M10.bLimitBackwardEnable AND M10.bLimitForwardEnable THEN
        astM10States[1].fPosition := M10.stAxisStatus.fActPosition + 105;
        astM10States[2].fPosition := M10.stAxisStatus.fActPosition - 105;
    // Both limits hit: reset positions, something is broken
    ELSIF NOT M10.bLimitBackwardEnable AND NOT M10.bLimitForwardEnable THEN
        astM10States[1].fPosition := 100;
        astM10States[2].fPosition := 0;
    // Top hit: here is top, lower is 105 away
    ELSIF NOT M10.bLimitForwardEnable THEN
        astM10States[1].fPosition := M10.stAxisStatus.fActPosition;
        astM10States[2].fPosition := M10.stAxisStatus.fActPosition - 105;
    // Bottom hit: here is bottom, upper is 105 away
    ELSIF NOT M10.bLimitBackwardEnable THEN
        astM10States[1].fPosition := M10.stAxisStatus.fActPosition + 105;
        astM10States[2].fPosition := M10.stAxisStatus.fActPosition;
    END_IF
END_IF
fbM10States(
    stMotionStage:=M10,
    astPositionState:=astM10States,
    eEnumSet:=eL2LSet,
    eEnumGet:=eL2LGet,
    bEnable:=TRUE,
);

MOTION_GVL.fbStandardPMPSDB(
    io_fbFFHWO:=GVL.fbFastFaultOutput1,
    bEnable:=TRUE,
    sPLCName:='plc-tst-motion',
);
GVL.fbFastFaultOutput1.Execute();
fbArbiterIO(
    LA:=GVL.fbArbiter,
    FFO:=GVL.fbFastFaultOutput1);]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>